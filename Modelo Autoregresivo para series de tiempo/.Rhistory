data_ts <- ts(data$registered, start=2011, end=2013, frequency=12)
data_ts
library(tseries)
install.packages("tseries")
install.packages("tseries")
#### ---------------------------------------------------------------------------
#### TEMA Introduccion al procesamiento de datos univariantes y multivariantes
#### EXPLORACION, DESCRIPCION Y DESCOMPOSICION DE DATOS UNIVARIANTES
#### REALIZADO POR: Alessandra Amicarella Girardi, V-26.209.731
#### ---------------------------------------------------------------------------
#### ---------------------------------------------------------------------------
####                  CARGA DE PAQUETES
library(readr)
library(gapminder)
library(ggplot2)
library(forecast)
library(dplyr)
library(colortools)
library(tseries)
#### ---------------------------------------------------------------------------
#### ---------------------------------------------------------------------------
# Lectura de datos: Archivo day.csv
# La primera fila contiene los nombres de las columnas
# Los datos estan separados por columnas
# La primera columna identifica el indice de los registros
# El archivo contiene 17389 filas
# Las variables contienen informacion sobre el alquiler de bicicletas
# instant: índice de registros
# dteday : fecha
# season : estación (1:invierno, 2:primavera, 3:verano, 4:otoño)
# yr : año (0: 2011, 1:2012)
# mnth : mes ( 1 a 12)
# hr : hora (0 a 23)
# holiday : si el día es festivo o no (extraído de [Web Link])
# weekday : día de la semana
# workingday : si el día no es ni fin de semana ni festivo es 1, en caso contrario es 0.
# weathersit :
#   1: Despejado, Pocas nubes, Parcialmente nublado, Parcialmente nublado
#   2: Niebla + Nublado, Niebla + Nubes dispersas, Niebla + Pocas nubes, Niebla
#   3: Nieve ligera, Lluvia ligera + Tormenta + Nubes dispersas, Lluvia ligera + Nubes dispersas
#   4: Lluvia intensa + Paletas de hielo + Tormenta eléctrica + Nieve, Nieve + Niebla
# temp : Temperatura normalizada en Celsius. Los valores se obtienen mediante (t-t_min)/(t_max-t_min), t_min=-8, t_max=+39 (sólo en escala horaria)
# atemp: Temperatura de sensación normalizada en Celsius. Los valores se obtienen mediante (t-t_min)/(t_max-t_min), t_min=-16, t_max=+50 (sólo en escala horaria)
# hum: Humedad normalizada. Los valores se dividen entre 100 (máximo)
# windspeed: Velocidad del viento normalizada. Los valores se dividen entre 67 (máx.)
# casual: recuento de usuarios ocasionales
# registered: recuento de usuarios registrados
# cnt: recuento del total de bicicletas de alquiler, incluyendo las casuales y las registradas
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
# Importar datos, los leemos y los guardamos en una variable llamada data
data <- read.csv(ruta_csv)
# Miramos los datos
head(data)
data$good_date <- as.Date(data$dteday, format = "%Y-%m-%d")
head(data$good_date)
class(data$good_date)
(time_plot <- ggplot(data, aes(x = good_date, y = registered)) +
geom_line() +
geom_smooth(formula = y ~ x, method = "loess", se = FALSE, span = 0.6) +
theme_classic())
data_ts <- ts(data$registered, start=2011, end=2013, frequency=12)
data_ts
# Descomponemos la serie haciendo uso de la funcion stl()
data_stl <- stl(data_ts, s.window = "period")
# Generamos las graficas
plot(data_stl)  # top=original data, second=estimated seasonal, third=estimated smooth trend, bottom=estimated irregular element i.e. unaccounted for variation
monthplot(data_stl)  # variation in milk production for each month
acf(data_ts)
(time_plot <- ggplot(data, aes(x = good_date, y = registered)) +
geom_line() +
geom_smooth(formula = y ~ x, method = "loess", se = FALSE, span = 0.6) +
theme_classic())
acf(data_ts)
#### ---------------------------------------------------------------------------
#### TEMA Introduccion al procesamiento de datos univariantes y multivariantes
#### EXPLORACION, DESCRIPCION Y DESCOMPOSICION DE DATOS UNIVARIANTES
#### REALIZADO POR: Alessandra Amicarella Girardi, V-26.209.731
#### ---------------------------------------------------------------------------
#### ---------------------------------------------------------------------------
####                  CARGA DE PAQUETES
library(readr)
library(gapminder)
library(ggplot2)
library(forecast)
library(dplyr)
library(colortools)
library(tseries)
#### ---------------------------------------------------------------------------
#### ---------------------------------------------------------------------------
# Lectura de datos: Archivo day.csv
# La primera fila contiene los nombres de las columnas
# Los datos estan separados por columnas
# La primera columna identifica el indice de los registros
# El archivo contiene 17389 filas
# Las variables contienen informacion sobre el alquiler de bicicletas
# instant: índice de registros
# dteday : fecha
# season : estación (1:invierno, 2:primavera, 3:verano, 4:otoño)
# yr : año (0: 2011, 1:2012)
# mnth : mes ( 1 a 12)
# hr : hora (0 a 23)
# holiday : si el día es festivo o no (extraído de [Web Link])
# weekday : día de la semana
# workingday : si el día no es ni fin de semana ni festivo es 1, en caso contrario es 0.
# weathersit :
#   1: Despejado, Pocas nubes, Parcialmente nublado, Parcialmente nublado
#   2: Niebla + Nublado, Niebla + Nubes dispersas, Niebla + Pocas nubes, Niebla
#   3: Nieve ligera, Lluvia ligera + Tormenta + Nubes dispersas, Lluvia ligera + Nubes dispersas
#   4: Lluvia intensa + Paletas de hielo + Tormenta eléctrica + Nieve, Nieve + Niebla
# temp : Temperatura normalizada en Celsius. Los valores se obtienen mediante (t-t_min)/(t_max-t_min), t_min=-8, t_max=+39 (sólo en escala horaria)
# atemp: Temperatura de sensación normalizada en Celsius. Los valores se obtienen mediante (t-t_min)/(t_max-t_min), t_min=-16, t_max=+50 (sólo en escala horaria)
# hum: Humedad normalizada. Los valores se dividen entre 100 (máximo)
# windspeed: Velocidad del viento normalizada. Los valores se dividen entre 67 (máx.)
# casual: recuento de usuarios ocasionales
# registered: recuento de usuarios registrados
# cnt: recuento del total de bicicletas de alquiler, incluyendo las casuales y las registradas
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
# Importar datos, los leemos y los guardamos en una variable llamada data
data <- read.csv(ruta_csv)
# Miramos los datos
head(data)
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
# Importar datos, los leemos y los guardamos en una variable llamada data
data <- read.csv(ruta_csv)
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
# Importar datos, los leemos y los guardamos en una variable llamada data
data <- read.xlsx(ruta_csv)
install.packages("openxlsx")
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
# Importar datos, los leemos y los guardamos en una variable llamada data
data <- read.xlsx(ruta_csv)
#### ---------------------------------------------------------------------------
#### TEMA Introduccion al procesamiento de datos univariantes y multivariantes
#### EXPLORACION, DESCRIPCION Y DESCOMPOSICION DE DATOS UNIVARIANTES
#### REALIZADO POR: Alessandra Amicarella Girardi, V-26.209.731
#### ---------------------------------------------------------------------------
#### ---------------------------------------------------------------------------
####                  CARGA DE PAQUETES
library(readr)
library(gapminder)
library(ggplot2)
library(forecast)
library(dplyr)
library(colortools)
library(tseries)
library(openxlsx)
#### ---------------------------------------------------------------------------
#### ---------------------------------------------------------------------------
# Lectura de datos: Archivo day.csv
# La primera fila contiene los nombres de las columnas
# Los datos estan separados por columnas
# La primera columna identifica el indice de los registros
# El archivo contiene 17389 filas
# Las variables contienen informacion sobre el alquiler de bicicletas
# instant: índice de registros
# dteday : fecha
# season : estación (1:invierno, 2:primavera, 3:verano, 4:otoño)
# yr : año (0: 2011, 1:2012)
# mnth : mes ( 1 a 12)
# hr : hora (0 a 23)
# holiday : si el día es festivo o no (extraído de [Web Link])
# weekday : día de la semana
# workingday : si el día no es ni fin de semana ni festivo es 1, en caso contrario es 0.
# weathersit :
#   1: Despejado, Pocas nubes, Parcialmente nublado, Parcialmente nublado
#   2: Niebla + Nublado, Niebla + Nubes dispersas, Niebla + Pocas nubes, Niebla
#   3: Nieve ligera, Lluvia ligera + Tormenta + Nubes dispersas, Lluvia ligera + Nubes dispersas
#   4: Lluvia intensa + Paletas de hielo + Tormenta eléctrica + Nieve, Nieve + Niebla
# temp : Temperatura normalizada en Celsius. Los valores se obtienen mediante (t-t_min)/(t_max-t_min), t_min=-8, t_max=+39 (sólo en escala horaria)
# atemp: Temperatura de sensación normalizada en Celsius. Los valores se obtienen mediante (t-t_min)/(t_max-t_min), t_min=-16, t_max=+50 (sólo en escala horaria)
# hum: Humedad normalizada. Los valores se dividen entre 100 (máximo)
# windspeed: Velocidad del viento normalizada. Los valores se dividen entre 67 (máx.)
# casual: recuento de usuarios ocasionales
# registered: recuento de usuarios registrados
# cnt: recuento del total de bicicletas de alquiler, incluyendo las casuales y las registradas
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
# Importar datos, los leemos y los guardamos en una variable llamada data
data <- read.xlsx(ruta_csv)
# Miramos los datos
head(data)
View(data)
data$good_date <- as.Date(data$dteday, format = "%Y-%m-%d")
head(data$good_date)
class(data$good_date)
# Vamos a corregir el formato de la fecha para poder usarlo
data$good_date <- as.Date(data$Date, format = "%Y-%m-%d")
# Vamos a corregir el formato de la fecha para poder usarlo
data$good_date <- as.Date(data$Date, format = "%d-%m-%Y")
head(data$good_date)
# Importar datos, los leemos y los guardamos en una variable llamada data
data <- read.xlsx(ruta_csv)
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
data <- read.csv(ruta_csv)
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
data <- read.csv(ruta_csv)
# Miramos los datos
head(data)
View(data)
library(readxl)
dataset <- read_excel(NULL)
# Importamos los datos y los leemos para un archivo excel
library(readxl)
dataset <- read_excel(ruta_csv)
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
#### ---------------------------------------------------------------------------
#### TEMA Introduccion al procesamiento de datos univariantes y multivariantes
#### EXPLORACION, DESCRIPCION Y DESCOMPOSICION DE DATOS UNIVARIANTES
#### REALIZADO POR: Alessandra Amicarella Girardi, V-26.209.731
#### ---------------------------------------------------------------------------
#### ---------------------------------------------------------------------------
####                  CARGA DE PAQUETES
library(readr)
library(gapminder)
library(ggplot2)
library(forecast)
library(dplyr)
library(colortools)
library(tseries)
library(openxlsx)
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
# Importamos los datos y los leemos para un archivo excel
library(readxl)
dataset <- read_excel(ruta_csv)
View(dataset)
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
# Importar datos, los leemos y los guardamos en una variable llamada data
dataset <- read_excel(ruta_csv)
View(dataset)
# Miramos los datos
head(data)
# Miramos los datos
head(dataset)
(time_plot <- ggplot(dataset, aes(x = Date, y = AH)) +
geom_line() +
geom_smooth(formula = y ~ x, method = "loess", se = FALSE, span = 0.6) +
theme_classic())
data$good_date <- as.Date(data$Date, format = "%d-%m-%Y")
head(data$good_date)
class(data$good_date)
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
# Importar datos, los leemos y los guardamos en una variable llamada data
dataset <- read_excel(ruta_csv)
# Miramos los datos
head(dataset)
View(dataset)
# Vamos a corregir el formato de la fecha para poder usarlo
data$good_date <- as.Date(data$Date, format = "%d-%m-%Y")
# Miramos los datos
head(dataset)
View(dataset)
# Vamos a corregir el formato de la fecha para poder usarlo
data$good_date <- as.Date(data$Date, format = "%Y-%m-%d")
View(dataset)
data$good_date <- as.Date(data$Date, format = "%Y-%m-%d")
# Vamos a corregir el formato de la fecha para poder usarlo
dataset$good_date <- as.Date(dataset$Date, format = "%Y-%m-%d")
head(data$good_date)
head(dataset$good_date)
class(dataset$good_date)
#### ---------------------------------------------------------------------------
#### TEMA Introduccion al procesamiento de datos univariantes y multivariantes
#### EXPLORACION, DESCRIPCION Y DESCOMPOSICION DE DATOS UNIVARIANTES
#### REALIZADO POR: Alessandra Amicarella Girardi, V-26.209.731
#### ---------------------------------------------------------------------------
#### ---------------------------------------------------------------------------
####                  CARGA DE PAQUETES
library(readr)
library(gapminder)
library(ggplot2)
library(forecast)
library(dplyr)
library(colortools)
library(tseries)
library(readxl)
#### ---------------------------------------------------------------------------
#### ---------------------------------------------------------------------------
# Lectura de datos. Archivo AirQualityUCI.xlsx
# La primera fila contiene los nombres de las columnas
# Los datos estan separados por columnas
# La primera columna identifica las fechas de los datos
# El archivo contiene 9358 filas
# Las variables contienen informacion sobre la respuestas promediado por hora
# de un conjunto de 5 sensores químicos de óxido metálico integrados en un
# dispositivo multisensor químico de calidad del aire.
# Las variables registradas fueron:
# Date: Fecha (DD/MM/AAAA)
# Time: Hora (HH.MM.SS)
# CO(GT): Concentración media horaria real de CO en mg/m^3 (analizador de referencia)
# PT08.S1(CO): Respuesta media horaria del sensor PT08.S1 (óxido de estaño) (nominalmente orientado al CO)
# NMHC(GT): Promedio horario real de la concentración global de hidrocarburos no metánicos en microg/m^3 (analizador de referencia)
# C6H6(GT): Concentración de benceno de media horaria real en microg/m^3 (analizador de referencia)
# PT08.S2(NMHC):  Respuesta media horaria del sensor PT08.S2 (titanio) (objetivo nominal de NMHC)
# NOx(GT): Concentración de NOx de media horaria real en ppb (analizador de referencia)
# PT08.S3(NOx): PT08.S3 (óxido de tungsteno) respuesta media horaria del sensor (objetivo nominal de NOx)
# NO2(GT): Concentración de NO2 real media horaria en microg/m^3 (analizador de referencia)
# PT08.S4(NO2):  PT08.S4 (óxido de tungsteno) respuesta media horaria del sensor (objetivo nominal de NO2)
# PT08.S5(O3):  PT08.S5 (óxido de indio) respuesta media horaria del sensor (objetivo nominal de O3)
# T: Temperatura en Â°C
# AH: Humedad relativa (%)
# AH: Humedad absoluta
#### ---------------------------------------------------------------------------
#### ---------------------------------------------------------------------------
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
# Importar datos, los leemos y los guardamos en una variable llamada data
dataset <- read_excel(ruta_csv)
# Miramos los datos
head(dataset)
View(dataset)
dataset$good_date <- as.Date(dataset$Date, format = "%Y-%m-%d")
head(dataset$good_date)
class(dataset$good_date)
(time_plot <- ggplot(dataset, aes(x = good_date, y = `C6H6(GT)`)) +
geom_line() +
geom_smooth(formula = y ~ x, method = "loess", se = FALSE, span = 0.6) +
theme_classic())
data_ts <- ts(dataset$`C6H6(GT)`, start=1, end= 12,  frequency=12)
data_ts
# Descomponemos la serie haciendo uso de la funcion stl()
data_stl <- stl(data_ts, s.window = "period")
# Generamos las graficas de la serie de tiempo descompuesta
plot(data_stl)
monthplot(data_stl)
# Grafica de autocorrelacion
acf(data_ts)
library(readr)
library(gapminder)
library(ggplot2)
library(forecast)
library(dplyr)
library(colortools)
library(tseries)
library(readxl)
library(dynlm)
install.packages("dynlm")
library(readr)
library(gapminder)
library(ggplot2)
library(forecast)
library(dplyr)
library(colortools)
library(tseries)
library(readxl)
library(dynlm)
install.packages("dynlm")
library(readr)
library(gapminder)
library(ggplot2)
library(forecast)
library(dplyr)
library(colortools)
library(tseries)
library(readxl)
library(dynlm)
install.packages("dynlm")
#### ---------------------------------------------------------------------------
#### TEMA Introduccion al procesamiento de datos univariantes y multivariantes
#### IMPLEMENTAR UN MODELO AUTORREGRESIVO PARA SERIES DE TIEMPO
#### REALIZADO POR: Alessandra Amicarella Girardi, V-26.209.731
#### ---------------------------------------------------------------------------
#### ---------------------------------------------------------------------------
####                  CARGA DE PAQUETES
library(readr)
library(gapminder)
library(ggplot2)
library(forecast)
library(dplyr)
library(colortools)
library(tseries)
library(readxl)
library(dynlm)
install.packages("dynlm")
library(readr)
library(gapminder)
library(ggplot2)
library(forecast)
library(dplyr)
library(colortools)
library(tseries)
library(readxl)
# Buscamos la ruta del archivo y la guardamos en una variable
ruta_csv <- file.choose()
# Importar datos, los leemos y los guardamos en una variable llamada data
dataset <- read_excel(ruta_csv)
# Miramos los datos
head(dataset)
View(dataset)
# Vamos a corregir el formato de la fecha para poder usarlo
dataset$good_date <- as.Date(dataset$Date, format = "%Y-%m-%d")
head(dataset$good_date)
class(dataset$good_date)
(time_plot <- ggplot(dataset, aes(x = good_date, y = `C6H6(GT)`)) +
geom_line() +
geom_smooth(formula = y ~ x, method = "loess", se = FALSE, span = 0.6) +
theme_classic())
plot(dataset)
# Visualizacion de los datos de la serie de tiempo
(time_plot <- ggplot(dataset, aes(x = good_date, y = `C6H6(GT)`)) +
geom_line() +
geom_smooth(formula = y ~ x, method = "loess", se = FALSE, span = 0.6) +
theme_classic())
plot(dataset, main="C6H5", colors="blue")
plot(data_ts, main="C6H5", colors="blue")
(time_plot <- ggplot(dataset, aes(x = good_date, y = `C6H6(GT)`)) +
geom_line() +
geom_smooth(formula = y ~ x, method = "loess", se = FALSE, span = 0.6) +
theme_classic())
plot(data_ts, main="C6H5", colors="blue")
plot(data_ts, main="C6H5", col="blue")
# Descomponemos la serie haciendo uso de la funcion stl()
data_stl <- stl(data_ts, s.window = "period")
# Generamos las graficas de la serie de tiempo descompuesta
plot(data_stl)
monthplot(data_stl)
(time_plot <- ggplot(dataset, aes(x = good_date, y = `C6H6(GT)`)) +
geom_line() +
geom_smooth(formula = y ~ x, method = "loess", se = FALSE, span = 0.6) +
theme_classic())
# Visualizacion de los datos de la serie de tiempo
(time_plot <- ggplot(dataset, aes(x = good_date, y = `C6H6(GT)`)) +
geom_line() +
geom_smooth( method = "loess", se = FALSE, span = 0.6) +
theme_classic())
plot(data_ts, main="C6H5", col="blue")
install.packages("utf8")
install.packages("utf8")
install.packages("utf8")
install.packages("dynlm")
install.packages("dynlm")
install.packages("car", repos = "https://cloud.r-project.org")
install.packages("utf8")
install.packages("utf8")
install.packages("utf8")
install.packages("utf8")
install.packages("utf8")
install.packages("utf8")
install.packages("utf8")
install.packages("utf8")
install.packages("utf8")
install.packages("utf8")
install.packages("utf8")
install.packages("dynlm")
install.packages("dynlm")
install.packages("dynlm")
install.packages("dynlm","RcppEigen")
install.packages("dynlm", "RcppEigen")
install.packages("RcppEigen")
install.packages("dynlm", repo = 'https://mac.R-project.org')
install.packages("car", dependencies = c("Depends", "Suggests"))
install.packages("RcppEigen")
install.packages("lme4")
install.packages("pbkrtest")
install.packages("car")
library(Rcpp)
evalCpp(2+2)
library(readr)
library(gapminder)
library(ggplot2)
library(forecast)
library(dplyr)
library(colortools)
library(tseries)
library(readxl)
ruta_csv <- file.choose()
# Importar datos, los leemos y los guardamos en una variable llamada data
dataset <- read_excel(ruta_csv)
# Miramos los datos
head(dataset)
View(dataset)
dataset$good_date <- as.Date(dataset$Date, format = "%Y-%m-%d")
head(dataset$good_date)
class(dataset$good_date)
(time_plot <- ggplot(dataset, aes(x = good_date, y = `C6H6(GT)`)) +
geom_line() +
geom_smooth(formula = y ~ x, method = "loess", se = FALSE, span = 0.6) +
theme_classic())
data_ts <- ts(dataset$`C6H6(GT)`, start=1, end= 12,  frequency=12)
data_ts
plot(data_ts, main="C6H5", col="blue")
ajuste <- auto.arima(y = data_ts)
summary(ajuste)
predicciones <- predicciones(ajuste)
predicciones <- forecast(ajuste)
p_predict <- autoplot(predicciones)
p_predict
ajuste <- auto.arima(y = data_ts)
summary(ajuste)
predicciones <- forecast(ajuste)
p_predict <- autoplot(predicciones)
p_predict
plot(data_ts, main="C6H5", col="blue")
p_predict
plot(data_ts, main="C6H5", col="blue")
# Modelo autoregresivo para predicciones
ajuste <- auto.arima(y = data_ts)
summary(ajuste)
# Graficamos las predicciones
predicciones <- forecast(ajuste)
p_predict <- autoplot(predicciones)
p_predict
